{
    // Import and export
    "import": {
        "prefix": "imp",
        "body": "import $1 from '${2:module}'$0",
        "description": "Imports entire module statement in ES6 syntax"
    },
    "importDestructing": {
        "prefix": "imd",
        "body": "import { $1 } from '${2:module}'$0",
        "description": "Imports only a portion of the module in ES6 syntax"
    },
    "importEverything": {
        "prefix": "ime",
        "body": "import * as ${1:alias} from '${2:module}'$0",
        "description": "Imports everything as alias from the module in ES6 syntax"
    },
    "importAs": {
        "prefix": "ima",
        "body": "import {${1:originalName} as ${2:alias} } from '${3:module}'$0",
        "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
    },
    "exportNamedFunction": {
        "prefix": "enf",
        "body": "export const ${1:functionName} = (${2:params}) =>  {\n\t$0\n}\n",
        "description": "Export named function in ES6 syntax"
    },
    "exportDefaultFunction": {
        "prefix": "edf",
        "body": "export default (${1:params}) =>  {\n\t$0\n}\n",
        "description": "Export default function in ES6 syntax"
    },
    "exportClass": {
        "prefix": "ecl",
        "body": "export default class ${1:className} {\n\t$0\n}\n",
        "description": "Export default class in ES6 syntax"
    },
    "exportClassExtends": {
        "prefix": "ece",
        "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n}\n",
        "description": "Export default class which extends a base one in ES6 syntax"
    },
    // Class helpers
    "constructor": {
        "prefix": "con",
        "body": "constructor(${1:params}) {\n\t${0}\n}",
        "description": "Add default constructor in a class in ES6 syntax"
    },
    "mehtod": {
        "prefix": "met",
        "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
        "description": "Creates a mehtod inside a class in ES6 syntax"
    },
    "propertyGet": {
        "prefix": "pge",
        "body": "get ${1:propertyName}() {\n\treturn this.${0}\n}",
        "description": "Creates a getter property inside a class in ES6 syntax"
    },
    "propertyset": {
        "prefix": "pse",
        "body": "set ${1:propertyName}(${2:value}) {\n\t${0}\n}",
        "description": "Creates a setter property inside a class in ES6 syntax"
    },
    // Various methods
    "forEach": {
        "prefix": "fre",
        "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})",
        "description": "Creates a forEach statement in ES6 syntax"
    },
    "forOf": {
        "prefix": "fof",
        "body": "for(let ${1:item} of ${2:object}) {\n\t${0}\n}",
        "description": "Iterating over property names of iterable objects"
    },
    "forIn": {
        "prefix": "fin",
        "body": "for(let ${1:item} in ${2:object}) {\n\t${0}\n}",
        "description": "Iterating over property values of iterable objects"
    },
    "anonymousFunction": {
        "prefix": "anfn",
        "body": "(${1:params}) => {\n\t${2}\n}",
        "description": "Creates an anonymous function in ES6 syntax"
    },
    "namedFunction": {
        "prefix": "nfn",
        "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
        "description": "Creates a named function in ES6 syntax"
    },
    "destructingObject": {
        "prefix": "dob",
        "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
        "description": "Creates and assigns a local variable using object destructing"
    },
    "destructingArray": {
        "prefix": "dar",
        "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
        "description": "Creates and assigns a local variable using array destructing"
    },
    "setInterval": {
        "prefix": "sti",
        "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})",
        "description": "Executes the given function at specified intervals in ES6 syntax"
    },
    "setTimeOut": {
        "prefix": "sto",
        "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})",
        "description": "Executes the given function after the specified delay in ES6 syntax"
    },
    // Console methods
    "consoleAssert": {
        "prefix": "cas",
        "body": "console.assert(${1:expression}, ${2:object})",
        "description": "对输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台"
    },
    "consoleClear": {
        "prefix": "ccl",
        "body": "console.clear()",
        "description": "Clears the console"
    },
    "consoleCount": {
        "prefix": "cco",
        "body": "console.count(${1:label})",
        "description": "统计代码被执行的次数"
    },
    "consoleDir": {
        "prefix": "cdi",
        "body": "console.dir(${1:object})",
        "description": "将该对象以树的结构进行输出，可以详细查对象的方法发展等等"
    },
    "consoleError": {
        "prefix": "cer",
        "body": "console.error(${1:object})",
        "description": "输出错误信息"
    },
    "consoleGroup": {
        "prefix": "cgr",
        "body": "console.group(\"${1:label}\")",
        "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
    },
    "consoleGroupEnd": {
        "prefix": "cge",
        "body": "console.groupEnd()",
        "description": "结束一组输出信息"
    },
    "consoleLog": {
        "prefix": "clg",
        "body": "console.log(${1:object})",
        "description": "输出普通信息"
    },
    "consoleTable": {
        "prefix": "cta",
        "body": "console.table(${1:object})",
        "description": "表格格式输出数组或对象"
    },
    "consoleTime": {
        "prefix": "cti",
        "body": "console.time($1)",
        "description": "计时开始"
    },
    "consoleTimeEnd": {
        "prefix": "cte",
        "body": "console.timeEnd($1)",
        "description": "计时开始"
    },
    "consoleTrace": {
        "prefix": "ctr",
        "body": "console.trace(${1:object})",
        "description": "Prints a stack trace from the point where the method was called"
    },
    "consoleWarn": {
        "prefix": "cwa",
        "body": "console.warn(${1:object})",
        "description": "输出警示信息"
    },
    "consoleInfo": {
        "prefix": "cin",
        "body": [
            "console.info($1)"
        ],
        "description": "输出提示性信息"
    },
    // Misc
    "debugger": {
        "prefix": "de",
        "body": [
            "debugger"
        ],
        "description": "debugger"
    },
    "use strict": {
        "prefix": "us",
        "body": [
            "'use strict'"
        ],
        "description": "Code snippet for 'use strict'"
    },
    "alert": {
        "prefix": "al",
        "body": [
            "alert('${1:msg}')"
        ],
        "description": "Code snippet for 'alert'"
    },
    "confirm": {
        "prefix": "co",
        "body": [
            "confirm('${1:msg}')"
        ],
        "description": "Code snippet for 'confirm'"
    },
    "prompt": {
        "prefix": "pm",
        "body": [
            "prompt('${1:msg}')"
        ],
        "description": "Code snippet for 'prompt'"
    },
    // DOM
    "addEventListener": {
        "prefix": "ae",
        "body": [
            "${1:document}.addEventListener('${2:load}', function (e) {",
            "\t${3:// body}",
            "})"
        ],
        "description": "Code snippet for \"addEventListener\""
    },
    "appendChild": {
        "prefix": "ac",
        "body": [
            "${1:document}.appendChild(${2:elem})"
        ],
        "description": "Code snippet for \"appendChild\""
    },
    "removeChild": {
        "prefix": "rc",
        "body": [
            "${1:document}.removeChild(${2:elem})"
        ],
        "description": "Code snippet for \"removeChild\""
    },
    "createElement": {
        "prefix": "cel",
        "body": [
            "${1:document}.createElement(${2:elem})"
        ],
        "description": "Code snippet for \"createElement\""
    },
    "createDocumentFragment": {
        "prefix": "cdf",
        "body": [
            "${1:document}.createDocumentFragment()$2"
        ],
        "description": "Code snippet for \"createDocumentFragment\""
    },
    "classList.add": {
        "prefix": "ca",
        "body": [
            "${1:document}.classList.add('${2:class}')"
        ],
        "description": "Code snippet for \"classList.add\""
    },
    "classList.toggle": {
        "prefix": "ct",
        "body": [
            "${1:document}.classList.toggle('${2:class}')"
        ],
        "description": "Code snippet for \"classList.toggle\""
    },
    "classList.remove": {
        "prefix": "cr",
        "body": [
            "${1:document}.classList.remove('${2:class}')"
        ],
        "description": "Code snippet for \"classList.remove\""
    },
    "getElementById": {
        "prefix": "gi",
        "body": [
            "${1:document}.getElementById('${2:id}')"
        ],
        "description": "Code snippet for \"getElementById\""
    },
    "getElementsByClassName": {
        "prefix": "gc",
        "body": [
            "${1:document}.getElementsByClassName('${2:class}')"
        ],
        "description": "Code snippet for \"getElementsByClassName\""
    },
    "getElementsByTagName": {
        "prefix": "gt",
        "body": [
            "${1:document}.getElementsByTagName('${2:tag}')"
        ],
        "description": "Code snippet for \"getElementsByTagName\""
    },
    "getAttribute": {
        "prefix": "ga",
        "body": [
            "${1:document}.getAttribute('${2:attr}')"
        ],
        "description": "Code snippet for \"getAttribute\""
    },
    "setAttribute": {
        "prefix": "sa",
        "body": [
            "${1:document}.setAttribute('${2:attr}', ${3:value})"
        ],
        "description": "Code snippet for \"setAttribute\""
    },
    "removeAttribute": {
        "prefix": "ra",
        "body": [
            "${1:document}.removeAttribute('${2:attr}')"
        ],
        "description": "Code snippet for \"removeAttribute\""
    },
    "innerHTML": {
        "prefix": "ih",
        "body": [
            "${1:document}.innerHTML = '${2:elem}'"
        ],
        "description": "Code snippet for \"innerHTML\""
    },
    "innerText": {
        "prefix": "it",
        "body": [
            "${1:document}.innerText = '${2:elem}'"
        ],
        "description": "Code snippet for \"innerText\""
    },
    "textContent": {
        "prefix": "tc",
        "body": [
            "${1:document}.textContent = '${2:content}'"
        ],
        "description": "Code snippet for \"textContent\""
    },
    "querySelector": {
        "prefix": "qs",
        "body": [
            "${1:document}.querySelector('${2:selector}')"
        ],
        "description": "Code snippet for \"querySelector\""
    },
    "querySelectorAll": {
        "prefix": "qsa",
        "body": [
            "${1:document}.querySelectorAll('${2:selector}')"
        ],
        "description": "Code snippet for \"querySelectorAll\""
    },
    // Function
    "function": {
        "prefix": "fn",
        "body": [
            "function ${1:methodName} (${2:arguments}) {",
            "\t${3:// body}",
            "}"
        ],
        "description": "普通方法"
    },
    "anonymous function": {
        "prefix": "afn",
        "body": [
            "function(${1:arguments}) {",
            "\t${2:// body}",
            "}"
        ],
        "description": "匿名方法"
    },
    "prototype": {
        "prefix": "pr",
        "body": [
            "${1:object}.prototype.${2:method} = function(${3:arguments}) {",
            "\t${4:// body}",
            "}"
        ],
        "description": "原型方法"
    },
    "immediately-invoked function expression": {
        "prefix": "iife",
        "body": [
            "(function(${1:window}, ${2:document}) {",
            "\t${3:// body}",
            "})(${1:window}, ${2:document})"
        ],
        "description": "立即调用函数表达式"
    },
    "function call": {
        "prefix": "call",
        "body": [
            "${1:method}.call(${2:context}, ${3:arguments})"
        ],
        "description": "Code snippet for function call"
    },
    "function apply": {
        "prefix": "apply",
        "body": [
            "${1:method}.apply(${2:context}, [${3:arguments}])"
        ],
        "description": "Code snippet for function apply"
    },
    "function as a property of an object": {
        "prefix": "ofn",
        "body": [
            "${1:functionName}: function(${2:arguments}) {",
            "\t${3:// body}",
            "}"
        ],
        "description": "Code snippet for function as a property of an object"
    },
    // JSON
    "JSON.parse": {
        "prefix": "jp",
        "body": [
            "JSON.parse(${1:obj})"
        ],
        "description": "Code snippet for 'JSON.parse'"
    },
    "JSON.stringify": {
        "prefix": "js",
        "body": [
            "JSON.stringify(${1:obj})"
        ],
        "description": "Code snippet for 'JSON.stringify'"
    },
    // $api Utils
    "$api.delHtmlTag": {
        "prefix": "a delHtmlTag",
        "body": [
            "\\$api.delHtmlTag(${1:''})"
        ],
        "description": "去掉html标记"
    },
    "$api.equals": {
        "prefix": "a equals",
        "body": [
            "\\$api.equals(${1:obj1},${2:obj2})"
        ],
        "description": "比较2个对象是否相等,递归比较"
    },
    "$api.getType": {
        "prefix": "a getType",
        "body": [
            "\\$api.getType(${1:obj})"
        ],
        "description": "获取对象类型"
    },
    "$api.getStyle": {
        "prefix": "a getStyle",
        "body": [
            "\\$api.getStyle(${1:dom})"
        ],
        "description": "获取dom元素的style对象"
    },
    "$api.isArray": {
        "prefix": "a isArray",
        "body": [
            "\\$api.isArray(${1:arr})"
        ],
        "description": "是否是数组类型"
    },
    "$api.isDate": {
        "prefix": "a isDate",
        "body": [
            "\\$api.isDate(${1:date})"
        ],
        "description": "是否是日期类型"
    },
    "$api.isFunction": {
        "prefix": "a isFunction",
        "body": [
            "\\$api.isFunction(${1:fun})"
        ],
        "description": "是否是函数类型"
    },
    "$api.isObject": {
        "prefix": "a isObject",
        "body": [
            "\\$api.isObject(${1:obj})"
        ],
        "description": "是否是对象类型"
    },
    "$api.isPlainObject": {
        "prefix": "a isPlainObject",
        "body": [
            "\\$api.isPlainObject(${1:obj})"
        ],
        "description": "是否是一个纯净的对象"
    },
    "$api.isRegExp": {
        "prefix": "a isRegExp",
        "body": [
            "\\$api.isRegExp(${1:reg})"
        ],
        "description": "是否是正则表达式类型"
    },
    "$api.isString": {
        "prefix": "a isString",
        "body": [
            "\\$api.isString(${1:str})"
        ],
        "description": "是否是字符串类型"
    },
    "$api.isWindow": {
        "prefix": "a isWindow",
        "body": [
            "\\$api.isWindow(${1:obj})"
        ],
        "description": "是否是window对象"
    },
    "$api.log": {
        "prefix": "a log",
        "body": [
            "\\$api.log(${1:msg})"
        ],
        "description": "输出日志"
    },
    "$api.mix": {
        "prefix": "a mix",
        "body": [
            "\\$api.mix(${1:true},${2:target},${3:object1})"
        ],
        "description": "用于合并多个对象或深克隆"
    },
    "$api.toFixed": {
        "prefix": "a toFixed",
        "body": [
            "\\$api.toFixed(${1:num},${2:2})"
        ],
        "description": "Number 四舍五入为指定小数位数的数字"
    },
    "$api.tpl": {
        "prefix": "a tpl",
        "body": [
            "\\$api.tpl(${1:tplStr},${2:data})"
        ],
        "description": "模板替换输出,$api.tpl('请输入{#min#}个字',{'min': 12})"
    },
    // $api Action
    "$api.addAction": {
        "prefix": "a addAction",
        "body": [
            "\\$api.addAction(${1:type},${2:hook})"
        ],
        "description": "添加指定类型action的钩子"
    },
    "$api.removeAction": {
        "prefix": "a removeAction",
        "body": [
            "\\$api.removeAction(${1:type},${2:name},${3:index})"
        ],
        "description": "删除指定类型action的钩子"
    },
    "$api.doAction": {
        "prefix": "a doAction",
        "body": [
            "\\$api.doAction(${1:type},${2:callback})"
        ],
        "description": "执行指定类型的action"
    },
    "$api.actionCount": {
        "prefix": "a actionCount",
        "body": [
            "\\$api.actionCount(${1:type},${2:name},${3:index})"
        ],
        "description": "获取符合条件的action的钩子的数量"
    },
    // $api Back
    "$api.addBack": {
        "prefix": "a addBack",
        "body": [
            "\\$api.addBack(${1:hook})"
        ],
        "description": "添加'backs'类型action的钩子"
    },
    "$api.addMsgBack": {
        "prefix": "a addMsgBack",
        "body": [
            "\\$api.addMsgBack(${1:hook})"
        ],
        "description": "添加'msgBacks'类型action的钩子"
    },
    "$api.back": {
        "prefix": "a back",
        "body": [
            "\\$api.back(${1:false})"
        ],
        "description": "执行back action(后退)"
    },
    "$api.canHistoryBack": {
        "prefix": "a canHistoryBack",
        "body": [
            "\\$api.canHistoryBack()"
        ],
        "description": "是否可以后退"
    },
    "$api.menu": {
        "prefix": "a menu",
        "body": [
            "\\$api.menu()"
        ],
        "description": "H5Plus 菜单"
    },
    "$api.plusBack": {
        "prefix": "a plusBack",
        "body": [
            "\\$api.plusBack()"
        ],
        "description": "H5Plus 后退"
    },
    "$api.removeBack": {
        "prefix": "a removeBack",
        "body": [
            "\\$api.removeBack(${1:name},${2:index})"
        ],
        "description": "删除'backs'类型action的钩子"
    },
    "$api.removeMsgBack": {
        "prefix": "a removeMsgBack",
        "body": [
            "\\$api.removeMsgBack(${1:name},${2:index})"
        ],
        "description": "删除'msgBacks'类型action的钩子"
    },
    "$api.setPreBack": {
        "prefix": "a setPreBack",
        "body": [
            "\\$api.setPreBack(${1:callback})"
        ],
        "description": "设置back前处理"
    },
    // $api Event
    "$api.fire": {
        "prefix": "a fire",
        "body": [
            "\\$api.fire(${1:winObj},${2:eventType},${3:eventData})"
        ],
        "description": "单窗体事件通知"
    },
    "$api.fireAll": {
        "prefix": "a fireAll",
        "body": [
            "\\$api.fireAll(${1:eventType},${2:eventData})"
        ],
        "description": "单窗体事件通知"
    },
    "$api.fireTree": {
        "prefix": "a fireTree",
        "body": [
            "\\$api.fireTree(${1:winObj},${2:eventType},${3:eventData})"
        ],
        "description": "窗体(树)事件通知,本窗体及所有子窗体(不递归)"
    },
    // $api Filter
    "$api.capitalize": {
        "prefix": "a capitalize",
        "body": [
            "\\$api.capitalize(${1:str})"
        ],
        "description": "字符串格式化，首字母大写：'abc' => 'Abc'"
    },
    "$api.currency": {
        "prefix": "a currency",
        "body": [
            "\\$api.currency(${1:num}, {",
            "\tprecision:3",
            "})"
        ],
        "description": "货币格式化"
    },
    "$api.formatDate": {
        "prefix": "a formatDate",
        "body": [
            "\\$api.formatDate(${1:date},'yyyy-MM-dd HH:mm:ss')"
        ],
        "description": "对日期进行格式化，目标可能是符合一定格式的字符串，数值，或Date对象。"
    },
    "$api.lowercase": {
        "prefix": "a lowercase",
        "body": [
            "\\$api.lowercase(${1:str})"
        ],
        "description": "字符串格式化，小写：'AbC' => 'abc'"
    },
    "$api.number": {
        "prefix": "a number",
        "body": [
            "\\$api.number(${1:num}, {",
            "\tprecision:3",
            "})"
        ],
        "description": "数字格式化"
    },
    "$api.pluralize": {
        "prefix": "a pluralize",
        "body": [
            "\\$api.pluralize(${1:str})"
        ],
        "description": "单词复数"
    },
    "$api.uppercase": {
        "prefix": "a uppercase",
        "body": [
            "\\$api.uppercase(${1:str})"
        ],
        "description": "字符串格式化，大写：'abc' => 'ABC'"
    },
    // $api os
    "$api.os.name": {
        "prefix": "a os name",
        "body": [
            "\\$api.os.name"
        ],
        "description": "系统环境名称"
    },
    "$api.os.wechat": {
        "prefix": "a os wechat",
        "body": [
            "\\$api.os.wechat"
        ],
        "description": "不是微信环境返回false,是微信环境返回版本号"
    },
    "$api.os.version": {
        "prefix": "a os version",
        "body": [
            "\\$api.os.version"
        ],
        "description": "系统环境版本号"
    },
    "$api.os.android": {
        "prefix": "a os android",
        "body": [
            "\\$api.os.android"
        ],
        "description": "是否安卓环境"
    },
    "$api.os.isBadAndroid": {
        "prefix": "a os isBadAndroid",
        "body": [
            "\\$api.os.isBadAndroid"
        ],
        "description": "是否安卓非Chrome环境"
    },
    "$api.os.ios": {
        "prefix": "a os ios",
        "body": [
            "\\$api.os.ios"
        ],
        "description": "是否为苹果设备"
    },
    "$api.os.iphone": {
        "prefix": "a os iphone",
        "body": [
            "\\$api.os.iphone"
        ],
        "description": "是否为苹果手机"
    },
    "$api.os.ipad": {
        "prefix": "a os ipad",
        "body": [
            "\\$api.os.ipad"
        ],
        "description": "是否为ipad"
    },
    "$api.os.plus": {
        "prefix": "a os plus",
        "body": [
            "\\$api.os.plus"
        ],
        "description": "是否在5+基座中运行"
    },
    "$api.os.stream": {
        "prefix": "a os stream",
        "body": [
            "\\$api.os.stream"
        ],
        "description": "是否为流应用"
    },
    // $api Storage
    "$api.getSetting": {
        "prefix": "a getSetting",
        "body": [
            "\\$api.getSetting(${1:key})"
        ],
        "description": "通过键(key)检索获取当前状态的值 相当于getStorageObject('$settings',key)"
    },
    "$api.getState": {
        "prefix": "a getState",
        "body": [
            "\\$api.getState(${1:key})"
        ],
        "description": "通过键(key)检索获取当前状态的值 相当于getStorageObject('$state',key)"
    },
    "$api.getStorage": {
        "prefix": "a getStorage",
        "body": [
            "\\$api.getStorage(${1:key})"
        ],
        "description": "通过键(key)检索获取应用存储的值"
    },
    "$api.getStorageObject": {
        "prefix": "a getStorageObject",
        "body": [
            "\\$api.getStorageObject(${1:key},${2:objKey})"
        ],
        "description": "通过键(key)检索获取存储值中对象(objKey)的值"
    },
    "$api.setSetting": {
        "prefix": "a setSetting",
        "body": [
            "\\$api.setSetting(${1:key},${2:value})"
        ],
        "description": "修改或添加键值(key-value)对数据到当前状态的值,相当于 setStorageObject('$settings',key,value)"
    },
    "$api.setState": {
        "prefix": "a setState",
        "body": [
            "\\$api.setState(${1:key},${2:value})"
        ],
        "description": "修改或添加键值(key-value)对数据到当前状态的值,相当于 setStorageObject('$state',key,value)"
    },
    "$api.setStorage": {
        "prefix": "a setStorage",
        "body": [
            "\\$api.setStorage(${1:key},${2:value})"
        ],
        "description": "修改或添加键值(key-value)对数据到当前状态"
    },
    "$api.setStorageObject": {
        "prefix": "a setStorageObject",
        "body": [
            "\\$api.setStorageObject(${1:key},${2:objKey},${3:value})"
        ],
        "description": "修改或添加键值对数据到对应存储(Key)对象的属性(objKey-value)的值"
    },
    // $api 消息弹窗
    "$api.alert": {
        "prefix": "a alert",
        "body": [
            "\\$api.alert(${1:msg}, {",
            "\ttitle: '标题',",
            "\tbuttonText: '知道了',",
            "\tonShow() {},",
            "\tonHide() {}",
            "})"
        ],
        "description": "弹窗信息,显示一个用户必须注意到并且必须点击按钮确认才能关闭的信息"
    },
    "$api.alertClose": {
        "prefix": "a alertClose",
        "body": [
            "\\$api.alertClose()"
        ],
        "description": "关闭弹窗信息"
    },
    "$api.confirm": {
        "prefix": "a confirm",
        "body": [
            "\\$api.confirm(${1:msg}, {",
            "\ttitle: '标题',",
            "\tconfirmText: '确定',",
            "\tcancelText: '取消',",
            "\tonShow() {},",
            "\tonHide() {},",
            "\tonConfirm() {},",
            "\tonCancel() {}",
            "})"
        ],
        "description": "弹窗信息,显示一个用户必须注意到并且必须点击按钮确认才能关闭的信息"
    },
    "$api.confirmClose": {
        "prefix": "a confirmClose",
        "body": [
            "\\$api.confirmClose()"
        ],
        "description": "关闭confirm弹窗信息"
    },
    "$api.loading": {
        "prefix": "a loading",
        "body": [
            "\\$api.loading(${1:msg}, {",
            "\tonShow() {},",
            "\tonHide() {}",
            "})"
        ],
        "description": "等待对话框，加载中的效果"
    },
    "$api.loadingClose": {
        "prefix": "a loadingClose",
        "body": [
            "\\$api.loadingClose()"
        ],
        "description": "关闭等待对话框"
    },
    "$api.login": {
        "prefix": "a login",
        "body": [
            "\\$api.login(${1:true}, () => {})"
        ],
        "description": "登录层"
    },
    "$api.loginCancle": {
        "prefix": "a loginCancle",
        "body": [
            "\\$api.loginCancle()"
        ],
        "description": "取消登录（未登录关闭）"
    },
    "$api.loginClose": {
        "prefix": "a loginClose",
        "body": [
            "\\$api.loginClose()"
        ],
        "description": "关闭登录层（登录成功）"
    },
    "$api.toast": {
        "prefix": "a toast",
        "body": [
            "\\$api.toast(${1:msg}, {",
            "\ttime: 2000,",
            "\tonShow() {},",
            "\tonHide() {}",
            "})"
        ],
        "description": "弹窗信息,显示一个用户必须注意到并且必须点击按钮确认才能关闭的信息"
    },
    "$api.toastClose": {
        "prefix": "a toastClose",
        "body": [
            "\\$api.toastClose()"
        ],
        "description": "关闭toast信息"
    },
    // $api 窗体操作
    "$api.closeWindow": {
        "prefix": "a closeWindow",
        "body": [
            "\\$api.closeWindow(${1:id}, {",
            "\tduration: 200,",
            "\taniHide: 'slide-out-right'",
            "})"
        ],
        "description": "关闭指定窗体,只针对H5+"
    },
    "$api.currentWebview": {
        "prefix": "a currentWebview",
        "body": [
            "\\$api.currentWebview()"
        ],
        "description": "获取当前窗体"
    },
    "$api.goHome": {
        "prefix": "a goHome",
        "body": [
            "\\$api.goHome()"
        ],
        "description": "回到首页"
    },
    "$api.hideWindow": {
        "prefix": "a hideWindow",
        "body": [
            "\\$api.hideWindow(${1:id}, {",
            "\tduration: 200,",
            "\taniHide: 'slide-out-right'",
            "})"
        ],
        "description": "隐藏指定窗体,只针对H5+"
    },
    "$api.isHomePage": {
        "prefix": "a isHomePage",
        "body": [
            "\\$api.isHomePage()"
        ],
        "description": "是否主页"
    },
    "$api.mounted": {
        "prefix": "a mounted",
        "body": [
            "\\$api.mounted(() => {})"
        ],
        "description": "plus设备加载完成"
    },
    "$api.onload": {
        "prefix": "a onload",
        "body": [
            "\\$api.onload(() => {})"
        ],
        "description": "Dom加载完成"
    },
    "$api.open": {
        "prefix": "a open",
        "body": [
            "\\$api.open(${1:id}, {",
            "\textras: {},",
            "\tshowOpts: {",
            "\t\tduration: 200,",
            "\t\taniShow: 'slide-in-right'",
            "\t}",
            "})"
        ],
        "description": "打开新窗口"
    },
    "$api.showWindow": {
        "prefix": "a showWindow",
        "body": [
            "\\$api.showWindow(${1:id}, true, {",
            "\tduration: 200,",
            "\taniHide: 'slide-in-right'",
            "})"
        ],
        "description": "显示指定窗体"
    },
    // $api 设备相关
    "$api.androidKeys": {
        "prefix": "a androidKeys",
        "body": [
            "\\$api.androidKeys()"
        ],
        "description": "监听back和menu按键,只在5+下使用"
    },
    "$api.noNetwork": {
        "prefix": "a noNetwork",
        "body": [
            "\\$api.noNetwork()"
        ],
        "description": "是否网络无连接,只在5+下使用"
    },
    // $api 页面字典,
    "$api.addPage": {
        "prefix": "a addPage",
        "body": [
            "\\$api.addPage({",
            "\t${1:'pageid'}: ${2:'url'}",
            "})"
        ],
        "description": "添加新的页面到pages字典中"
    },
    "$api.pages": {
        "prefix": "a pages",
        "body": [
            "\\$api.pages.${1:pageid}"
        ],
        "description": "获取页面字典中的指定页面url"
    },
    // $box ViewBox
    "$box": {
        "prefix": "box",
        "body": [
            "${1:this}.\\$refs.cBox"
        ],
        "description": "添加新的页面到pages字典中"
    },
    "$box.onload": {
        "prefix": "box onload",
        "body": [
            "${1:this}.\\$refs.cBox.onload(() => {})"
        ],
        "description": "dom load，给视图内的刷新用的，如果不需要刷新则调用 $api.onload"
    },
    "$box.mounted": {
        "prefix": "box mounted",
        "body": [
            "${1:this}.\\$refs.cBox.mounted(() => {})"
        ],
        "description": "plus load(5+ plusReady)，给视图内的刷新用的，如果不需要刷新则调用 $api.mounted"
    },
    "$box.refresh": {
        "prefix": "box refresh",
        "body": [
            "${1:this}.\\$refs.cBox.refresh()"
        ],
        "description": "ViewBox内刷新"
    },
    "$box.webError": {
        "prefix": "box webError",
        "body": [
            "${1:this}.\\$refs.cBox.webError(${2:true})"
        ],
        "description": "显示网络、加载错误"
    },
    "$box.customeError": {
        "prefix": "box customeError",
        "body": [
            "${1:this}.\\$refs.cBox.customeError(${2:true})"
        ],
        "description": "自定义错误，错误内容在插槽 'error' 中编辑"
    },
    "$box.scrollTo": {
        "prefix": "box scrollTo",
        "body": [
            "${1:this}.\\$refs.cBox.scrollTo(${2:top})"
        ],
        "description": "滚动到指定位置"
    },
    "$box.getScrollTop": {
        "prefix": "box getScrollTop",
        "body": [
            "${1:this}.\\$refs.cBox.getScrollTop()"
        ],
        "description": "获取当前滚动距离"
    },
    "$box.getScrollBody": {
        "prefix": "box getScrollBody",
        "body": [
            "${1:this}.\\$refs.cBox.getScrollBody()"
        ],
        "description": "获取滚动div, 也可以直接用组件引用的.$refs.viewBoxBody"
    },
    "$box.setBodyHeight": {
        "prefix": "box setBodyHeight",
        "body": [
            "${1:this}.\\$refs.cBox.setBodyHeight(${2:height})"
        ],
        "description": "设置viewBoxBody的高度，默认会在window.onresize中自动计算"
    },
    // axios
    "axios get": {
        "prefix": "axios get",
        "body": [
            "axios.get(${1:url}, {",
            "\t// `params` 是即将与请求一起发送的 URL 参数",
            "\tparams: {},",
            "\t// 在发送请求之前调用",
            "\tbeforeSend() {},",
            "\t// 当请求完成之后调用这个函数，无论成功或失败",
            "\tcomplete() {},",
            "\tapp: {",
            "\t\t// 该请求是加载还是操作类型",
            "\t\tload: true,",
            "\t\t// \\$box的webError，用于错误的界面显示或提示",
            "\t\twebError: ${2:this}.\\$refs.cBox.webError,",
            "\t\t// 用于登录后回调",
            "\t\tloginCallback() {}",
            "\t}",
            "}).then((response) => {",
            "\tconsole.log(response)",
            "}).catch((response) => {",
            "\tconsole.log(response)",
            "})"
        ],
        "description": "执行 get 请求"
    },
    "axios delete": {
        "prefix": "axios delete",
        "body": [
            "axios.delete(${1:url}, {",
            "\t// `params` 是即将与请求一起发送的 URL 参数",
            "\tparams: {},",
            "\t// 在发送请求之前调用",
            "\tbeforeSend() {},",
            "\t// 当请求完成之后调用这个函数，无论成功或失败",
            "\tcomplete() {},",
            "\tapp: {",
            "\t\t// 该请求是加载还是操作类型",
            "\t\tload: true,",
            "\t\t// \\$box的webError，用于错误的界面显示或提示",
            "\t\twebError: ${2:this}.\\$refs.cBox.webError,",
            "\t\t// 用于登录后回调",
            "\t\tloginCallback() {}",
            "\t}",
            "}).then((response) => {",
            "\tconsole.log(response)",
            "}).catch((response) => {",
            "\tconsole.log(response)",
            "})"
        ],
        "description": "执行 delete 请求"
    },
    "axios post": {
        "prefix": "axios post",
        "body": [
            "axios.post(${1:url}, {",
            "\t// `data` 是作为请求主体被发送的数据",
            "\t// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'",
            "}, {",
            "\t// `params` 是即将与请求一起发送的 URL 参数",
            "\tparams: {},",
            "\t// 在发送请求之前调用",
            "\tbeforeSend() {},",
            "\t// 当请求完成之后调用这个函数，无论成功或失败",
            "\tcomplete() {},",
            "\tapp: {",
            "\t\t// 该请求是加载还是操作类型",
            "\t\tload: true,",
            "\t\t// \\$box的webError，用于错误的界面显示或提示",
            "\t\twebError: ${2:this}.\\$refs.cBox.webError,",
            "\t\t// 用于登录后回调",
            "\t\tloginCallback() {}",
            "\t}",
            "}).then((response) => {",
            "\tconsole.log(response)",
            "}).catch((response) => {",
            "\tconsole.log(response)",
            "})"
        ],
        "description": "执行 post 请求"
    },
    "axios put": {
        "prefix": "axios put",
        "body": [
            "axios.put(${1:url}, {",
            "\t// `data` 是作为请求主体被发送的数据",
            "\t// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'",
            "}, {",
            "\t// `params` 是即将与请求一起发送的 URL 参数",
            "\tparams: {},",
            "\t// 在发送请求之前调用",
            "\tbeforeSend() {},",
            "\t// 当请求完成之后调用这个函数，无论成功或失败",
            "\tcomplete() {},",
            "\tapp: {",
            "\t\t// 该请求是加载还是操作类型",
            "\t\tload: true,",
            "\t\t// \\$box的webError，用于错误的界面显示或提示",
            "\t\twebError: ${2:this}.\\$refs.cBox.webError,",
            "\t\t// 用于登录后回调",
            "\t\tloginCallback() {}",
            "\t}",
            "}).then((response) => {",
            "\tconsole.log(response)",
            "}).catch((response) => {",
            "\tconsole.log(response)",
            "})"
        ],
        "description": "执行 put 请求"
    },
    "axios all": {
        "prefix": "axios all",
        "body": [
            "axios.all([${1:axios1}(), ${2:axios2}()])",
            "\t.then(axios.spread(function (resopnse1, resopnse2) {",
            "\t\t// 两个请求现在都执行完成",
            "\t})).catch((response) => {",
            "\t\t// 只要有一个请求失败就算失败",
            "\t})"
        ],
        "description": "执行多个并发请求"
    },
    "axios spread": {
        "prefix": "axios spread",
        "body": [
            "axios.spread(function (resopnse1, resopnse2) {",
            "\t// 两个请求现在都执行完成",
            "})"
        ],
        "description": "分割响应对象,按照请求顺序将响应分割成多个单独的响应对象"
    }
    // Vue HTTP
    // "Vue HTTP Get": {
    //     "prefix": "vh.get",
    //     "body": "this.$http.get(${1:url}).then((response) => {\n\tconsole.log(response)\n}).catch((response) => {\n\tconsole.log(response)\n})",
    //     "description": "Vue HTTP Get Request function"
    // },
    // "Vue HTTP Post": {
    //     "prefix": "vh.post",
    //     "body": "this.$http.post(${1:url},data, options).then((response) => {\n\tconsole.log(response)\n}).catch((response) => {\n\tconsole.log(response)\n})",
    //     "description": "Vue HTTP Post Request function"
    // }
}